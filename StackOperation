/*
Program in C for the following operations on STACK of Integers 
a. Push an Element on to Stack 
b. Pop an Element from Stack 
c. Demonstrate how Stack can be used to check Palindrome 
d. Demonstrate Overflow and Underflow situations on Stack 
e. Display the status of Stack 
f. Exit 
Support the program with appropriate functions for each of the above operations */

#include<stdio.h>   
#include<stdlib.h>  

#define MAX 5       // Define the maximum size of the stack

int s[MAX];         // Array to store stack elements
int top = -1;       // Stack pointer to track the top of the stack (-1 means empty stack)

// Function declarations
void push(int item);        // Function to push an element onto the stack
void pop();         // Function to pop an element from the stack
void palindrome();  // Function to check if the stack contents form a palindrome
void display();     // Function to display the contents of the stack
int isFull();       // Function to check if the stack is full (overflow)
int isEmpty();      // Function to check if the stack is empty (underflow)

void main()
{
    int choice,item;     // Variable to store user choice from the menu
    while (1)       // Infinite loop to keep displaying the menu
    {
        // Displaying the menu
        printf("\n~~~~~~Menu~~~~~~ :\n");
        printf("1. Push an Element to Stack and Overflow demo \n");
        printf("2. Pop an Element from Stack and Underflow demo\n");
        printf("3. Palindrome demo \n");
        printf("4. Display \n");
        printf("5. Exit \n");
        printf("Enter your choice: \n");
        scanf("%d", &choice);   // Reading user's choice
        
        // Switch case to handle the menu options
        switch (choice)
        {
            case 1: printf("Enter the item: \n");
                    scanf("%d", &item);  // Read the item to be pushed
                    push(item);    // Call push function to add an element to the stack
                    break;
            case 2: pop();     // Call pop function to remove an element from the stack
                    break;
            case 3: palindrome();  // Call palindrome function to check if stack is a palindrome
                    break;
            case 4: display(); // Call display function to show current stack contents
                    break;
            case 5: exit(0);   // Exit the program
            default: printf("\nPlease enter a valid choice.\n");  // Handle invalid choices
                     break;
        }
    }
}

int isFull()
{
    // If the top is equal to MAX-1, stack is full
    if (top == MAX - 1)
    {
        return 1;   // Return 1 (true) if the stack is full
    }
    else
    {
        return 0;   // Return 0 (false) if the stack is not full
    }
}

int isEmpty()
{
    // If the top is equal to -1, stack is empty
    if (top == -1)
    {
        return 1;   // Return 1 (true) if the stack is empty
    }
    else
    {
        return 0;   // Return 0 (false) if the stack is not empty
    }
}

void push(int item)
{
    if (isFull())   // Check if the stack is full
    {
        printf("Stack overflows (Stack is Full)\n");
        return;     // If full, print overflow message and return
    }
    
    s[++top] = item;     // Increment top and add item to stack
    printf("%d is inserted\n",item);
}

void pop()
{
    if (isEmpty())   // Check if the stack is empty
    {
        printf("Stack underflows (Stack is Empty)\n");
        return;      // If empty, print underflow message and return
    }
    printf("Deleted item is: %d\n", s[top--]);  // Print and remove the top item from the stack
}

void display()
{
    int i;   // Loop variable for stack traversal
    if (isEmpty())   // Check if the stack is empty
    {
        printf("Stack is the\n");
        return;      // If empty, print message and return
    }
    printf("\nStack contents are:\n");
    for (i = top; i >= 0; i--)   // Traverse the stack from top to bottom
    {
        printf("| %d |\n", s[i]);   // Print each element in the stack
    }
}

void palindrome()
{
    int i;  // Variables: flag to check palindrome status, i for loop
    if (isEmpty())    // Check if the stack is empty
    {
        printf("Stack is the\n");
        return;       // If empty, print message and return
    }

    display();  // Display the current stack contents

    printf("\nReverse of stack contents are:\n");
    for (i = 0; i <=top; i++)   // Display the stack contents in reverse
    {
        printf("| %d |\n", s[i]);
    }

    // Check if the stack contents form a palindrome
    for (i = 0; i <= top / 2; i++)   // Loop to compare elements from start and end
    {
        if (s[i] != s[top - i])   // If elements don't match, it's not a palindrome
        {
            printf("\nStack contents are NOT a PALINDROME\n");
            return;
        }
    }


}
